modeltype SIMPLEDeployment uses 'http://www.example.org/simplePalladio/DeploymentViewPoint';
modeltype SIMPLEAssembly uses 'http://www.example.org/simplePalladio/AssemblyViewPoint';
modeltype SIMPLESystemIndependent uses 'http://www.example.org/simplePalladio/SystemIndependentViewPoint';
modeltype SIMPLECommon uses 'http://www.example.org/simplePalladio/Common';
modeltype PCMResourceEnvironment uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCMAllocation uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCMSystem uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCMComposition uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCMEntity uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCMRepository uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCMSEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';

transformation MainTransformation(in sAll:SIMPLEDeployment, in sAss:SIMPLEAssembly, in sRep:SIMPLESystemIndependent, in sEnv:SIMPLEDeployment, out pRE:PCMResourceEnvironment, out pA:PCMAllocation, out pS: PCMSystem, out pR: PCMRepository);

intermediate class TRole {
	communicator:SIMPLESystemIndependent::InterfaceCommunicator;
	interface:SIMPLESystemIndependent::Interface;
};

main() {
	// Environment Mapping
    sEnv.rootObjects()[SIMPLEDeployment::EnvironmentViewType]->map envvtMapping();
	
	// Repository Mapping
	sRep.rootObjects()[SIMPLESystemIndependent::RepositoryViewType]->map repvtMapping();
	
	// System Mapping
	sAss.rootObjects()[SIMPLEAssembly::AssemblyViewType]->map assvtMapping();
	
	// Allocation Mapping
	sAll.rootObjects()[SIMPLEDeployment::AllocationViewType]->map allvtMapping();
}

//++++++++++ EnvironmentViewType :: Simple -> PCMResourceEnvironment ++++++++++
mapping SIMPLEDeployment::EnvironmentViewType::envvtMapping() : PCMResourceEnvironment::ResourceEnvironment@pRE{
	result.entityName := "ResourceEnvironment";
	result.resourceContainer_ResourceEnvironment := self.environmentElements->select(s|s.oclIsKindOf(SIMPLEDeployment::Container))->oclAsType(SIMPLEDeployment::Container) -> collect(c | c->map containerMapping());	
	result.linkingResources__ResourceEnvironment := self.environmentElements->select(s|s.oclIsKindOf(SIMPLEDeployment::Link))->oclAsType(SIMPLEDeployment::Link) -> collect(c | c->map linkMapping());	
}

mapping SIMPLEDeployment::Link::linkMapping() : PCMResourceEnvironment::LinkingResource{
	result.entityName := self.name;
	result.connectedResourceContainers_LinkingResource := self.containers -> collect(c | c.resolveone(PCMResourceEnvironment::ResourceContainer)) -> asSet();
}

mapping SIMPLEDeployment::Container::containerMapping() : PCMResourceEnvironment::ResourceContainer{
	result.entityName := self.name;
}
//---------- EnvironmentViewType :: Simple -> PCMResourceEnvironment ----------

//++++++++++ RepositoryViewType :: Simple -> PCMRepository ++++++++++
mapping SIMPLESystemIndependent::RepositoryViewType::repvtMapping() : PCMRepository::Repository@pR{
	result.entityName := 'Repository';
	result.repositoryDescription := 'Description';
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::BOOLEAN.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::CHAR.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::INT.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::LONG.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::FLOAT.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::DOUBLE.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::STRING.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += object PCMRepository::CompositeDataType {
			entityName := 'KeyValuePair';
			//key
			innerDeclaration_CompositeDataType += object PCMRepository::InnerDeclaration{ 				
				entityName := 'KEY'; 
				datatype_InnerDeclaration := SIMPLESystemIndependent::Type::LONG.resolveone(PCMRepository::DataType);
			};
			//value
			innerDeclaration_CompositeDataType += object PCMRepository::InnerDeclaration{
				entityName := 'VALUE';
				datatype_InnerDeclaration := SIMPLESystemIndependent::Type::STRING.resolveone(PCMRepository::DataType);
			};
		};
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::DATE.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::MAP.map basicDataTypeMapping(result.dataTypes__Repository);
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::LIST.map basicDataTypeMapping(result.dataTypes__Repository);
	result.interfaces__Repository := self.repositoryElements->select(it| it.oclIsKindOf(SIMPLESystemIndependent::Interface))->collect(it|it.oclAsType(SIMPLESystemIndependent::Interface)) -> collect(c|c->map interfaceMapping());
	result.components__Repository := self.repositoryElements->selectByKind(SIMPLESystemIndependent::AbstractComponent) -> collect(c|c->map abstractComponentMapping());
}

abstract mapping SIMPLESystemIndependent::AbstractComponent::abstractComponentMapping() : PCMRepository::RepositoryComponent
disjuncts  SIMPLESystemIndependent::Component::basicComponentMapping, SIMPLESystemIndependent::CompositeComponent::compositeComponentMapping {}

mapping SIMPLESystemIndependent::Type::basicDataTypeMapping(in rS:Set(PCMRepository::DataType)) : PCMRepository::DataType 
disjuncts SIMPLESystemIndependent::Type::primitiveDataTypeMapping, SIMPLESystemIndependent::Type::collectionDataTypeMapping, SIMPLESystemIndependent::Type::compositeDataTypeMapping{}


mapping SIMPLESystemIndependent::Type::primitiveDataTypeMapping(in rS:Set(PCMRepository::DataType)) : PCMRepository::PrimitiveDataType
when{Set{SIMPLESystemIndependent::Type::VOID,SIMPLESystemIndependent::Type::BOOLEAN,SIMPLESystemIndependent::Type::CHAR,
SIMPLESystemIndependent::Type::DOUBLE,SIMPLESystemIndependent::Type::FLOAT,SIMPLESystemIndependent::Type::INT,SIMPLESystemIndependent::Type::LONG,
SIMPLESystemIndependent::Type::STRING}->includes(self)} 
{
	switch {
		case(self = SIMPLESystemIndependent::Type::BOOLEAN) {result.type := PCMRepository::PrimitiveTypeEnum::BOOL}
		case(self = SIMPLESystemIndependent::Type::CHAR) {result.type := PCMRepository::PrimitiveTypeEnum::CHAR}
		case(self = SIMPLESystemIndependent::Type::DOUBLE or self = SIMPLESystemIndependent::Type::FLOAT) {result.type := PCMRepository::PrimitiveTypeEnum::DOUBLE}
		case(self = SIMPLESystemIndependent::Type::INT) {result.type := PCMRepository::PrimitiveTypeEnum::INT}
		case(self = SIMPLESystemIndependent::Type::LONG) {result.type := PCMRepository::PrimitiveTypeEnum::LONG}
		case(self = SIMPLESystemIndependent::Type::STRING) {result.type := PCMRepository::PrimitiveTypeEnum::STRING}	
	}
}

mapping SIMPLESystemIndependent::Type::collectionDataTypeMapping(in rS:Set(PCMRepository::DataType)) : PCMRepository::CollectionDataType
when{Set{SIMPLESystemIndependent::Type::LIST, SIMPLESystemIndependent::Type::MAP}->includes(self)}
{
	switch {
		case(self = SIMPLESystemIndependent::Type::LIST) {
			result.entityName := 'LIST';
			result.innerType_CollectionDataType := SIMPLESystemIndependent::Type::STRING.resolveone(PCMRepository::DataType);		
		}
		case(self = SIMPLESystemIndependent::Type::MAP) {
			result.entityName := 'MAP';		
			result.innerType_CollectionDataType := rS -> select(s|s.oclIsKindOf(PCMRepository::CompositeDataType))->oclAsType(PCMRepository::CompositeDataType) -> select (s|s.entityName = 'KeyValuePair')->asSequence()->first();
		}		
	}	
}

mapping SIMPLESystemIndependent::Type::compositeDataTypeMapping(in rS:Set(PCMRepository::DataType)) : PCMRepository::CompositeDataType
when{Set{SIMPLESystemIndependent::Type::DATE}->includes(self)}
{
	switch {
		case(self = SIMPLESystemIndependent::Type::DATE) {
			entityName := 'DATE';
			innerDeclaration_CompositeDataType := object PCMRepository::InnerDeclaration{ 
				entityName := 'UnixEpochTime';
				datatype_InnerDeclaration := SIMPLESystemIndependent::Type::LONG.resolveone(PCMRepository::DataType);
			}
		}
	}	
}

mapping SIMPLESystemIndependent::Component::basicComponentMapping() : PCMRepository::BasicComponent{
	result.entityName := self.name;
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := self;
		}.map provRoleMapping());
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := self;
		}.map reqRoleMapping());
	result.serviceEffectSpecifications__BasicComponent := self.services->collect(srv|srv->map serviceMapping(result));
}

mapping SIMPLESystemIndependent::Service::serviceMapping(entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::ResourceDemandingSEFF {
	result.describedService__SEFF := self.signature.resolveone(PCMRepository::OperationSignature);
	result.steps_Behaviour := self.behaviourDescription.behaviorElements->collect(be|be -> map behaviorElementMapping(self.behaviourDescription, entity));
}

mapping SIMPLESystemIndependent::BehaviorElement::behaviorElementMapping(behDesc: SIMPLESystemIndependent::BehaviourDescription, entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::AbstractAction 
disjuncts SIMPLESystemIndependent::InternalAction::internalActionMapping, SIMPLESystemIndependent::ExternalCall::externalCallMapping, SIMPLESystemIndependent::Loop::loopMapping, SIMPLESystemIndependent::Branch::branchMapping 
{}

mapping SIMPLESystemIndependent::InternalAction::internalActionMapping(behDesc: SIMPLESystemIndependent::BehaviourDescription, entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::InternalAction {
}

mapping SIMPLESystemIndependent::ExternalCall::externalCallMapping(behDesc: SIMPLESystemIndependent::BehaviourDescription, entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::ExternalCallAction {
	init{
		var selfComponent := behDesc.service.component;
		/* This is not 100% correct, since two interfaces can contain the same signature and the wrong 
		 * one might be found in this code snippet. This way of the realisation was an requirement from
		 * an earlier stage. Normally/ more intuitively one might set a containment from interfaces 
		 * to Signatures so that no two interfaces can refer to the same signatur. 
		 */
		var selfInterface := selfComponent.requiredInterfaces -> select(s|s.signatures -> includes(self.signature))->first();
	}
	result.retryCount := 3;
	result.calledService_ExternalService := self.signature.resolveone(PCMRepository::OperationSignature);
	
	result.role_ExternalService := entity.resolveReqRole(selfInterface.resolveone(PCMRepository::OperationInterface));
}

mapping SIMPLESystemIndependent::Loop::loopMapping(behDesc: SIMPLESystemIndependent::BehaviourDescription, entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::LoopAction {
	result.bodyBehaviour_Loop := object PCMSEFF::ResourceDemandingBehaviour {
		steps_Behaviour := self.behaviorElements->collect(be|be -> map behaviorElementMapping(behDesc, entity));
	}
}

mapping SIMPLESystemIndependent::Branch::branchMapping(behDesc: SIMPLESystemIndependent::BehaviourDescription, entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMSEFF::BranchAction {
	result.branches_Branch := object PCMSEFF::GuardedBranchTransition {
		branchBehaviour_BranchTransition := object PCMSEFF::ResourceDemandingBehaviour {
			steps_Behaviour := self.behaviorElements->collect(be|be -> map behaviorElementMapping(behDesc, entity));
		} 
	}
}

mapping SIMPLESystemIndependent::CompositeComponent::compositeComponentMapping() : PCMRepository::CompositeComponent{
	init {
		var sys := self.system;
		var assContexts = sys.systemElements -> select(s|s.oclIsKindOf(SIMPLEAssembly::AssemblyContext))->oclAsType(SIMPLEAssembly::AssemblyContext);
		var assConnectors = sys.systemElements -> select(s|s.oclIsKindOf(SIMPLEAssembly::AbstractConnector))->oclAsType(SIMPLEAssembly::AbstractConnector);
	}
	result.entityName := self.name;	
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := sys;
		}.map provRoleMapping());
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := sys;
		}.map reqRoleMapping());
	result.assemblyContexts__ComposedStructure := assContexts -> collect(c|c->map assemblyContextMapping());
	result.connectors__ComposedStructure := assConnectors -> collect(c|c->map abstractConnectorMapping(result));
}
// Map to OperationInterface; Other subclass (Infrastructureinterface) is not modelled in SimplePalladio.
// Distinction between both interface kinds is not possible
mapping SIMPLESystemIndependent::Interface::interfaceMapping() : PCMRepository::OperationInterface{
	result.entityName := self.name;
	result.signatures__OperationInterface := self.signatures->collect(sig|sig->map signatureMapping());
}

mapping SIMPLESystemIndependent::Signature::signatureMapping() : PCMRepository::OperationSignature {
	result.entityName := self.name;
	if (self.returnValue <> SIMPLESystemIndependent::Type::VOID) then
		result.returnType__OperationSignature := self.returnValue.resolveone(PCMRepository::DataType)
	endif;
	result.parameters__OperationSignature := self.parameters->collect(par| par->map parameterMapping())
}

mapping SIMPLESystemIndependent::Parameter::parameterMapping() : PCMRepository::Parameter {
	result.parameterName := self.name;
	result.modifier__Parameter := PCMRepository::ParameterModifier::none;
	result.dataType__Parameter := self.type.resolveone(PCMRepository::DataType);
}
//---------- RepositoryViewType :: Simple -> PCMRepository ----------

//++++++++++ AssemblyViewType :: Simple -> PCMSystem ++++++++++
mapping SIMPLEAssembly::AssemblyViewType::assvtMapping() : PCMSystem::System@pS{
	//Main System/ Root System is always named 'Sys' (Convention) 
	init{
		var sys = self.systems-> select(it|it.name->includes('Sys'))->asSequence()->first();// sAss-> objectsOfType(SIMPLEAssembly::System) -> asSequence() -> first() -> select(it|it.name->includes('Sys'))->asSequence()->first();
		var sysElements = sys -> collect(c|c.systemElements);
		var assContexts = sysElements -> select(s|s.oclIsKindOf(SIMPLEAssembly::AssemblyContext))->oclAsType(SIMPLEAssembly::AssemblyContext);
		var assConnectors = sysElements -> select(s|s.oclIsKindOf(SIMPLEAssembly::AbstractConnector))->oclAsType(SIMPLEAssembly::AbstractConnector); 	
	}
	//see convention above
	result.entityName := 'Sys';	
	result.providedRoles_InterfaceProvidingEntity := sys.providedInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := sys;
		}.map provRoleMapping());
	result.requiredRoles_InterfaceRequiringEntity := sys.requiredInterfaces->
		collect(i| object TRole { 		
			interface := i;
			communicator := sys;
		}.map reqRoleMapping());
	result.assemblyContexts__ComposedStructure := assContexts -> collect(c|c->map assemblyContextMapping());
	result.connectors__ComposedStructure := assConnectors->collect(c|c->map abstractConnectorMapping(result));
}

mapping SIMPLEAssembly::AssemblyContext::assemblyContextMapping() : PCMComposition::AssemblyContext{
	result.entityName := self.name;
	result.encapsulatedComponent__AssemblyContext := self.component.resolveone(PCMRepository::RepositoryComponent);
}

mapping SIMPLEAssembly::AbstractConnector::abstractConnectorMapping(entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMComposition::Connector 
disjuncts SIMPLEAssembly::AssemblyConnector::assemblyConnectorMapping, SIMPLEAssembly::DelegationConnector::provDelegationConnectorMapping, SIMPLEAssembly::DelegationConnector::reqDelegationConnectorMapping {}



mapping SIMPLEAssembly::AssemblyConnector::assemblyConnectorMapping(entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMComposition::AssemblyConnector {
	result.entityName := self.name;
	result.requiringAssemblyContext_AssemblyConnector := self.requiredRole.parentRequirereeAssemblyContext.resolveone(PCMComposition::AssemblyContext);
	result.providingAssemblyContext_AssemblyConnector := self.providedRole.parentProviderAssemblyContext.resolveone(PCMComposition::AssemblyContext);
	result.requiredRole_AssemblyConnector := object TRole{ 
		communicator := self.requiredRole.parentRequirereeAssemblyContext.component;
		interface := self.requiredRole.interface;
	}.resolveReqRole();
	result.providedRole_AssemblyConnector := object TRole{ 
		communicator := self.providedRole.parentProviderAssemblyContext.component;
		interface := self.providedRole.interface;
	}.resolveProvRole();
}

mapping SIMPLEAssembly::DelegationConnector::provDelegationConnectorMapping(entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMComposition::ProvidedDelegationConnector 
when {self.role.parentProviderAssemblyContext->notEmpty()} {
	result.entityName := self.name;
	result.assemblyContext_ProvidedDelegationConnector := self.role.parentProviderAssemblyContext.resolveone(PCMComposition::AssemblyContext);
	result.innerProvidedRole_ProvidedDelegationConnector := object TRole{ 
		communicator := self.role.parentProviderAssemblyContext.component;
		interface := self.role.interface;
	}.resolveProvRole();	
	result.outerProvidedRole_ProvidedDelegationConnector := entity.resolveProvRole(self.interface.resolveone(PCMRepository::OperationInterface));
}
mapping SIMPLEAssembly::DelegationConnector::reqDelegationConnectorMapping(entity: PCMEntity::InterfaceProvidingRequiringEntity) : PCMComposition::RequiredDelegationConnector 
when {self.role.parentRequirereeAssemblyContext->notEmpty()} {
	result.entityName := self.name;
	result.assemblyContext_RequiredDelegationConnector := self.role.parentRequirereeAssemblyContext.resolveone(PCMComposition::AssemblyContext);
	result.innerRequiredRole_RequiredDelegationConnector := object TRole{ 
		communicator := self.role.parentRequirereeAssemblyContext.component;
		interface := self.role.interface;
	}.resolveReqRole();
	result.outerRequiredRole_RequiredDelegationConnector := entity.resolveReqRole(self.interface.resolveone(PCMRepository::OperationInterface));
}

mapping TRole::provRoleMapping() : PCMRepository::OperationProvidedRole{
	init{
		var x := self.communicator.oclAsType(SIMPLECommon::NamedElement);
	}	
	result.entityName := x.name.concat('_').concat(self.interface.name).concat('_provider');
	result.providedInterface__OperationProvidedRole := self.interface.resolveone(PCMRepository::OperationInterface);
}

mapping TRole::reqRoleMapping() : PCMRepository::OperationRequiredRole{
	init{
		var x := self.communicator.oclAsType(SIMPLECommon::NamedElement);
	}	
	result.entityName := x.name.concat('_').concat(self.interface.name).concat('_requiree');
	result.requiredInterface__OperationRequiredRole := self.interface.resolveone(PCMRepository::OperationInterface);
}

query PCMEntity::InterfaceProvidingRequiringEntity::resolveProvRole(interface: PCMRepository::OperationInterface) : PCMRepository::OperationProvidedRole {
	return self.providedRoles_InterfaceProvidingEntity->oclAsType(PCMRepository::OperationProvidedRole)->select(s|s.providedInterface__OperationProvidedRole = interface)->asSequence()->first();
}

query PCMEntity::InterfaceProvidingRequiringEntity::resolveReqRole(interface: PCMRepository::OperationInterface) : PCMRepository::OperationRequiredRole {
	return self.requiredRoles_InterfaceRequiringEntity->oclAsType(PCMRepository::OperationRequiredRole)->select(s|s.requiredInterface__OperationRequiredRole = interface)->asSequence()->first();
}

query TRole::resolveProvRole() : PCMRepository::OperationProvidedRole{
	if(self.communicator.oclIsKindOf(SIMPLESystemIndependent::AbstractComponent))
	then{
		var pcmCom := self.communicator.oclAsType(SIMPLESystemIndependent::AbstractComponent).resolveone(PCMRepository::RepositoryComponent);		
		var setRol := pcmCom.providedRoles_InterfaceProvidingEntity; 	
		var pcmInt := self.interface.resolveone(PCMRepository::OperationInterface);
		var role := setRol->oclAsType(PCMRepository::OperationProvidedRole)->select(s|s.providedInterface__OperationProvidedRole = pcmInt)->asSequence()->first();
		return role;
	}
	else {
		var pcmSys := self.communicator.oclAsType(SIMPLEAssembly::System).resolveone(PCMSystem::System);		
		var setRol := pcmSys.providedRoles_InterfaceProvidingEntity; 	
		var pcmInt := self.interface.resolveone(PCMRepository::OperationInterface);
		var role := setRol->oclAsType(PCMRepository::OperationProvidedRole)->select(s|s.providedInterface__OperationProvidedRole = pcmInt)->asSequence()->first();
		return role;
	}
	endif;
	return null;
} 

query TRole::resolveReqRole() : PCMRepository::OperationRequiredRole{
	if(self.communicator.oclIsKindOf(SIMPLESystemIndependent::AbstractComponent))
	then{
		var pcmCom := self.communicator.oclAsType(SIMPLESystemIndependent::AbstractComponent).resolveone(PCMRepository::RepositoryComponent);		
		var setRol := pcmCom.requiredRoles_InterfaceRequiringEntity; 	
		var pcmInt := self.interface.resolveone(PCMRepository::OperationInterface);
		var role := setRol->oclAsType(PCMRepository::OperationRequiredRole)->select(s|s.requiredInterface__OperationRequiredRole = pcmInt)->asSequence()->first();
		return role;
	}
	else {
		var pcmSys := self.communicator.oclAsType(SIMPLEAssembly::System).resolveone(PCMSystem::System);		
		var setRol := pcmSys.requiredRoles_InterfaceRequiringEntity; 	
		var pcmInt := self.interface.resolveone(PCMRepository::OperationInterface);
		var role := setRol->oclAsType(PCMRepository::OperationRequiredRole)->select(s|s.requiredInterface__OperationRequiredRole = pcmInt)->asSequence()->first();
		return role;
	}
	endif;
	return null;
}

//---------- AssemblyViewType :: Simple -> PCMSystem ----------


//++++++++++ AllocationViewType :: Simple -> PCMAllocation ++++++++++
mapping SIMPLEDeployment::AllocationViewType::allvtMapping() : PCMAllocation::Allocation@pA{
	result.entityName := "Allocation";
	result.allocationContexts_Allocation := self.allocationContexts->collect(c | c->map allocationContextMapping());
}

mapping SIMPLEDeployment::AllocationContext::allocationContextMapping() : PCMAllocation::AllocationContext{
	result.eventChannel__AllocationContext := null;
	result.resourceContainer_AllocationContext := self.container -> resolveone(PCMResourceEnvironment::ResourceContainer);
	result.assemblyContext_AllocationContext := self.assembly -> resolveone(PCMComposition::AssemblyContext);	
	result.entityName := self.assembly.name.concat('_').concat(self.container.name); 
}
//---------- AllocationViewType :: Simple -> PCMAllocation ----------