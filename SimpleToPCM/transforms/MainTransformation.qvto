modeltype SIMPLEDeployment uses 'http://www.example.org/simplePalladio/DeploymentViewPoint';
modeltype SIMPLEAssembly uses 'http://www.example.org/simplePalladio/AssemblyViewPoint';
modeltype SIMPLESystemIndependent uses 'http://www.example.org/simplePalladio/SystemIndependentViewPoint';
modeltype PCMResourceEnvironment uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCMAllocation uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCMSystem uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCMComposition uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCMRepository uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCMSEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';

transformation MainTransformation(in sD:SIMPLEDeployment, in sA:SIMPLEAssembly, in sR:SIMPLESystemIndependent, out pRE:PCMResourceEnvironment, out pA:PCMAllocation, out pS: PCMSystem, out pR: PCMRepository);

main() {
	// Environment Mapping
	sD.rootObjects()[SIMPLEDeployment::EnvironmentViewType]->map envvtMapping();
	
	// Repository Mapping
	sD.rootObjects()[SIMPLESystemIndependent::RepositoryViewType]->map repvtMapping();
	
	// System Mapping
	sA.rootObjects()[SIMPLEAssembly::AssemblyViewType]->map assvtMapping();
	
	// Allocation Mapping
	sA.rootObjects()[SIMPLEDeployment::AllocationViewType]->map allvtMapping();
}

//++++++++++ EnvironmentViewType :: Simple -> PCMResourceEnvironment ++++++++++
mapping SIMPLEDeployment::EnvironmentViewType::envvtMapping() : PCMResourceEnvironment::ResourceEnvironment{
	result.resourceContainer_ResourceEnvironment += sD->objectsOfType(SIMPLEDeployment::Container)->collect(c | c->map containerMapping());	
	result.linkingResources__ResourceEnvironment += sD->objectsOfType(SIMPLEDeployment::Link)->collect(l | l->map linkMapping());
}

mapping SIMPLEDeployment::Link::linkMapping() : PCMResourceEnvironment::LinkingResource{
	result.id := self.name;
	result.entityName := self.name;
	result.connectedResourceContainers_LinkingResource := self.containers -> collect(c | c.resolveone(PCMResourceEnvironment::ResourceContainer)) -> asSet();
}

mapping SIMPLEDeployment::Container::containerMapping() : PCMResourceEnvironment::ResourceContainer{
	result.id := self.name;
	result.entityName := self.name;
}
//---------- EnvironmentViewType :: Simple -> PCMResourceEnvironment ----------

//++++++++++ RepositoryViewType :: Simple -> PCMRepository ++++++++++
mapping SIMPLESystemIndependent::RepositoryViewType::repvtMapping() : PCMRepository::Repository{
	init{
		//AbstractRepositoryElement
		var aRepElems = sD.objectsOfType(SIMPLESystemIndependent::AbstractRepositoryElement);
		//Component
		var bCom = aRepElems -> select(s|s->oclIsTypeOf(SIMPLESystemIndependent::Component)->includes(true))->oclAsType(SIMPLESystemIndependent::Component);
		//CompositeComponent
		var cCom = aRepElems -> select(s|s->oclIsTypeOf(SIMPLESystemIndependent::CompositeComponent)->includes(true))->oclAsType(SIMPLESystemIndependent::CompositeComponent);
		//Interfaces
		var ifs = aRepElems -> select(s|s->oclIsTypeOf(SIMPLESystemIndependent::Interface)->includes(true))->oclAsType(SIMPLESystemIndependent::Interface);		
		var string = object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::STRING};
		var long = object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::LONG};
		var keyValuePair = object PCMRepository::CompositeDataType {
			id := 'KeyValuePair';
			entityName := 'KeyValuePair';
			//key
			innerDeclaration_CompositeDataType += object PCMRepository::InnerDeclaration{ 				
				entityName := 'KEY'; 
				datatype_InnerDeclaration := long;
			};
			//value
			innerDeclaration_CompositeDataType += object PCMRepository::InnerDeclaration{
				entityName := 'VALUE';
				datatype_InnerDeclaration := string;
			};
		};
	}	
	result.id := 'Repository';
	result.entityName := 'Repository';
	result.repositoryDescription := 'Description';
	//TODO: Datatype mapping here
	result.dataTypes__Repository += SIMPLESystemIndependent::Type::BOOLEAN.map typeMapping(); 
	result.interfaces__Repository += ifs -> collect(c|c->map interfaceMapping());
	result.components__Repository += bCom -> collect(c|c->map basicComponentMapping());
	result.components__Repository += cCom -> collect(c|c->map compositeComponentMapping());
	//result.failureTypes do not exist in SimplePalladio
	//primitive Datatype
	result.dataTypes__Repository += object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::BOOL};
	result.dataTypes__Repository += object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::CHAR};
	result.dataTypes__Repository += object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::DOUBLE};
	result.dataTypes__Repository += object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::INT};
	result.dataTypes__Repository += long;
	result.dataTypes__Repository += string;
	//DATE
	result.dataTypes__Repository += object PCMRepository::CompositeDataType {
		id := 'DATE';
		entityName := 'DATE';
		innerDeclaration_CompositeDataType += object PCMRepository::InnerDeclaration{ 
			entityName := 'UnixEpochTime';
			datatype_InnerDeclaration := long;
		};
	};
	//MAP
	result.dataTypes__Repository += keyValuePair;
	result.dataTypes__Repository += object PCMRepository::CollectionDataType{ 
		id := 'MAP';
		entityName := 'MAP';		
		innerType_CollectionDataType := keyValuePair;
	};
	//LIST
	result.dataTypes__Repository += object PCMRepository::CollectionDataType{
		id := 'LIST';
		entityName := 'LIST';
		innerType_CollectionDataType := string;		
	};
	//VOID does not exist explicitly in PCM represantation.
}

mapping SIMPLESystemIndependent::Component::basicComponentMapping() : PCMRepository::BasicComponent{
	result.id := self.name;
	result.entityName := self.name;
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces->
		collect(i| object PCMRepository::OperationProvidedRole { 
			providedInterface__OperationProvidedRole := i.resolveone(PCMRepository::OperationInterface);
		});
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces->
		collect(i| object PCMRepository::OperationRequiredRole { 
			requiredInterface__OperationRequiredRole := i.resolveone(PCMRepository::OperationInterface);
		});
	result.serviceEffectSpecifications__BasicComponent := self.services->collect(srv|srv->map serviceMapping());
}

mapping SIMPLESystemIndependent::Service::serviceMapping() : PCMSEFF::ResourceDemandingSEFF {
	result.describedService__SEFF := self.signature.resolveone(PCMRepository::OperationSignature);
	result.steps_Behaviour := self.behaviourDescription.behaviorElements->collect(be|be -> map behaviorElementMapping());
}

mapping SIMPLESystemIndependent::BehaviorElement::behaviorElementMapping() : PCMSEFF::AbstractAction {
	init {
		result := switch {
			case(self.oclIsKindOf(SIMPLESystemIndependent::InternalAction)) { self.oclAsType(SIMPLESystemIndependent::InternalAction).map internalActionMapping()}
			case(self.oclIsKindOf(SIMPLESystemIndependent::ExternalCall)) { self.oclAsType(SIMPLESystemIndependent::ExternalCall).map externalCallMapping()}
			case(self.oclIsKindOf(SIMPLESystemIndependent::Loop)) { self.oclAsType(SIMPLESystemIndependent::Loop).map loopMapping()}
			case(self.oclIsKindOf(SIMPLESystemIndependent::Branch)) { self.oclAsType(SIMPLESystemIndependent::Branch).map branchMapping()}
		}
	}
}

mapping SIMPLESystemIndependent::InternalAction::internalActionMapping() : PCMSEFF::InternalAction {
}

mapping SIMPLESystemIndependent::ExternalCall::externalCallMapping() : PCMSEFF::ExternalCallAction {
	result.retryCount := 3;
	result.calledService_ExternalService := self.signature.resolveone(PCMRepository::OperationSignature);
	//TODO: Interface role
}

mapping SIMPLESystemIndependent::Loop::loopMapping() : PCMSEFF::LoopAction {
	//TODO: Variables
	result.bodyBehaviour_Loop := object PCMSEFF::ResourceDemandingBehaviour {
		steps_Behaviour := self.behaviorElements->collect(be|be -> map behaviorElementMapping());
	}
}

mapping SIMPLESystemIndependent::Branch::branchMapping() : PCMSEFF::BranchAction {
	//TODO: Variables
	result.branches_Branch := object PCMSEFF::GuardedBranchTransition {
		branchBehaviour_BranchTransition := object PCMSEFF::ResourceDemandingBehaviour {
			steps_Behaviour := self.behaviorElements->collect(be|be -> map behaviorElementMapping());
		} 
	}
}

mapping SIMPLESystemIndependent::CompositeComponent::compositeComponentMapping() : PCMRepository::CompositeComponent{
	result.id := self.name;
	result.entityName := self.name;
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces->
		collect(i| object PCMRepository::OperationProvidedRole {
			providedInterface__OperationProvidedRole := i.resolveone(PCMRepository::OperationInterface);
		});
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces->
		collect(i| object PCMRepository::OperationRequiredRole { 
			requiredInterface__OperationRequiredRole := i.resolveone(PCMRepository::OperationInterface);
		});	
	//TODO
}
// Map to OperationInterface; Other subclass (Infrastructureinterface) is not modelled in SimplePalladio.
// Distinction between both interface kinds is not possible
mapping SIMPLESystemIndependent::Interface::interfaceMapping() : PCMRepository::OperationInterface{
	result.id := self.name;
	result.entityName := self.name;
	result.signatures__OperationInterface := self.signatures->collect(sig|sig->map signatureMapping());
}

mapping SIMPLESystemIndependent::Signature::signatureMapping() : PCMRepository::OperationSignature {
	result.id := self.name;
	result.entityName := self.name;
	if (self.returnValue <> SIMPLESystemIndependent::Type::VOID) then
		result.returnType__OperationSignature := self.returnValue.resolveone(PCMRepository::DataType)
	endif;
	result.parameters__OperationSignature := self.parameters->collect(par| par->map parameterMapping())
}

mapping SIMPLESystemIndependent::Parameter::parameterMapping() : PCMRepository::Parameter {
	result.parameterName := self.name;
	result.modifier__Parameter := PCMRepository::ParameterModifier::none;
	result.dataType__Parameter := self.type.resolveone(PCMRepository::DataType);
}

/* ONLY FOR PRESENTAION PURPOSE
mapping SIMPLESystemIndependent::Type::primitiveTypeMapping() : PCMRepository::PrimitiveDataType{
	//For VOID, DATE, LIST and MAP no sufficient pendants exist in the PCMRepository::PrimitiveTypeEnum.
	result.type := switch{ 
		//case(self = SIMPLESystemIndependent::Type::VOID) {null}
		case(self = SIMPLESystemIndependent::Type::BOOLEAN) {PCMRepository::PrimitiveTypeEnum::BOOL}
		case(self = SIMPLESystemIndependent::Type::CHAR) {PCMRepository::PrimitiveTypeEnum::CHAR}
		//case(self = SIMPLESystemIndependent::Type::DATE) {null}
		case(self = SIMPLESystemIndependent::Type::DOUBLE) {PCMRepository::PrimitiveTypeEnum::DOUBLE}
		//Convert float to double
		case(self = SIMPLESystemIndependent::Type::FLOAT) {PCMRepository::PrimitiveTypeEnum::DOUBLE}
		//case(self = SIMPLESystemIndependent::Type::LIST) {null}
		case(self = SIMPLESystemIndependent::Type::INT) {PCMRepository::PrimitiveTypeEnum::INT}
		case(self = SIMPLESystemIndependent::Type::LONG) {PCMRepository::PrimitiveTypeEnum::LONG}
		//case(self = SIMPLESystemIndependent::Type::MAP) {null}
		case(self = SIMPLESystemIndependent::Type::STRING) {PCMRepository::PrimitiveTypeEnum::STRING}
	};
}
*/
mapping SIMPLESystemIndependent::Type::typeMapping() : PCMRepository::DataType{
	init {
		result := object PCMRepository::PrimitiveDataType {type := PCMRepository::PrimitiveTypeEnum::BOOL};
	}
}
//---------- RepositoryViewType :: Simple -> PCMRepository ----------

//++++++++++ AssemblyViewType :: Simple -> PCMSystem ++++++++++
mapping SIMPLEAssembly::AssemblyViewType::assvtMapping() : PCMSystem::System{
	//Main System/ Root System is always named 'Sys' (Convention) 
	init{
		var sys = sA->objectsOfType(SIMPLEAssembly::System) -> select(it|it.name->includes('Sys'))->asSequence()->first();
		var sysElements = sys -> collect(c|c.systemElements);
		var assContexts = sysElements -> select(s|s->oclIsTypeOf(SIMPLEAssembly::AssemblyContext)->includes(true))->oclAsType(SIMPLEAssembly::AssemblyContext)		
	}
	//see convention above
	result.id := 'Sys';
	result.entityName := 'Sys';
	result.assemblyContexts__ComposedStructure += assContexts -> collect(c|c->map assemblyContextMapping());
	result.resourceRequiredDelegationConnectors_ComposedStructure;
	//not used in simplePalladio
	//result.eventChannel__ComposedStructure;
	result.connectors__ComposedStructure;
	result.providedRoles_InterfaceProvidingEntity := sys.providedInterfaces->
		collect(i| object PCMRepository::OperationProvidedRole { 
			providedInterface__OperationProvidedRole := i.resolveone(PCMRepository::OperationInterface);
		});
	result.resourceRequiredRoles__ResourceInterfaceRequiringEntity;
	result.requiredRoles_InterfaceRequiringEntity := sys.requiredInterfaces->
		collect(i| object PCMRepository::OperationRequiredRole { 
			requiredInterface__OperationRequiredRole := i.resolveone(PCMRepository::OperationInterface);
		});
	//not used in simplePalladio
	//result.qosAnnotations_System;
}

mapping SIMPLEAssembly::AssemblyContext::assemblyContextMapping() : PCMComposition::AssemblyContext{
	result.encapsulatedComponent__AssemblyContext := self.component.resolveone(PCMRepository::RepositoryComponent);
}
//---------- AssemblyViewType :: Simple -> PCMSystem ----------


//++++++++++ AllocationViewType :: Simple -> PCMAllocation ++++++++++
mapping SIMPLEDeployment::AllocationViewType::allvtMapping() : PCMAllocation::Allocation{
	result.allocationContexts_Allocation += sD->objectsOfType(SIMPLEDeployment::AllocationContext)->collect(c | c->map allocationContextMapping());
}

mapping SIMPLEDeployment::AllocationContext::allocationContextMapping() : PCMAllocation::AllocationContext{
	result.eventChannel__AllocationContext := null;
	result.resourceContainer_AllocationContext := self.container -> resolveone(PCMResourceEnvironment::ResourceContainer);
	result.assemblyContext_AllocationContext := self.assembly -> resolveone(PCMComposition::AssemblyContext);
}
//---------- AllocationViewType :: Simple -> PCMAllocation ----------