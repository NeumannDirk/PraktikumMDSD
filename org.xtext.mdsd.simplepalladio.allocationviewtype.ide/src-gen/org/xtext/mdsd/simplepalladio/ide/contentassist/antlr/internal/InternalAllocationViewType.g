/*
 * generated by Xtext 2.24.0
 */
grammar InternalAllocationViewType;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.mdsd.simplepalladio.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.mdsd.simplepalladio.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.mdsd.simplepalladio.services.AllocationViewTypeGrammarAccess;

}
@parser::members {
	private AllocationViewTypeGrammarAccess grammarAccess;

	public void setGrammarAccess(AllocationViewTypeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAllocationViewType
entryRuleAllocationViewType
:
{ before(grammarAccess.getAllocationViewTypeRule()); }
	 ruleAllocationViewType
{ after(grammarAccess.getAllocationViewTypeRule()); } 
	 EOF 
;

// Rule AllocationViewType
ruleAllocationViewType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllocationViewTypeAccess().getGroup()); }
		(rule__AllocationViewType__Group__0)
		{ after(grammarAccess.getAllocationViewTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAllocationContext
entryRuleAllocationContext
:
{ before(grammarAccess.getAllocationContextRule()); }
	 ruleAllocationContext
{ after(grammarAccess.getAllocationContextRule()); } 
	 EOF 
;

// Rule AllocationContext
ruleAllocationContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllocationContextAccess().getGroup()); }
		(rule__AllocationContext__Group__0)
		{ after(grammarAccess.getAllocationContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__0__Impl
	rule__AllocationViewType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationViewTypeKeyword_0()); }
	'AllocationViewType'
	{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationViewTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__1__Impl
	rule__AllocationViewType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAllocationViewTypeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__2__Impl
	rule__AllocationViewType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsKeyword_2()); }
	'allocationContexts'
	{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__3__Impl
	rule__AllocationViewType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getAllocationViewTypeAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__4__Impl
	rule__AllocationViewType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAssignment_4()); }
	(rule__AllocationViewType__AllocationContextsAssignment_4)
	{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__5__Impl
	rule__AllocationViewType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getGroup_5()); }
	(rule__AllocationViewType__Group_5__0)*
	{ after(grammarAccess.getAllocationViewTypeAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__6__Impl
	rule__AllocationViewType__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getAllocationViewTypeAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getAllocationViewTypeAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllocationViewType__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group_5__0__Impl
	rule__AllocationViewType__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getCommaKeyword_5_0()); }
	','
	{ after(grammarAccess.getAllocationViewTypeAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationViewType__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAssignment_5_1()); }
	(rule__AllocationViewType__AllocationContextsAssignment_5_1)
	{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllocationContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__0__Impl
	rule__AllocationContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getAllocationContextKeyword_0()); }
	'AllocationContext'
	{ after(grammarAccess.getAllocationContextAccess().getAllocationContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__1__Impl
	rule__AllocationContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAllocationContextAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__2__Impl
	rule__AllocationContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getContainerKeyword_2()); }
	'container'
	{ after(grammarAccess.getAllocationContextAccess().getContainerKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__3__Impl
	rule__AllocationContext__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getContainerAssignment_3()); }
	(rule__AllocationContext__ContainerAssignment_3)
	{ after(grammarAccess.getAllocationContextAccess().getContainerAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__4__Impl
	rule__AllocationContext__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getAssemblyKeyword_4()); }
	'assembly'
	{ after(grammarAccess.getAllocationContextAccess().getAssemblyKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__5__Impl
	rule__AllocationContext__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getAssemblyAssignment_5()); }
	(rule__AllocationContext__AssemblyAssignment_5)
	{ after(grammarAccess.getAllocationContextAccess().getAssemblyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllocationContext__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllocationContextAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getAllocationContextAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllocationViewType__AllocationContextsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAllocationContextParserRuleCall_4_0()); }
		ruleAllocationContext
		{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAllocationContextParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationViewType__AllocationContextsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAllocationContextParserRuleCall_5_1_0()); }
		ruleAllocationContext
		{ after(grammarAccess.getAllocationViewTypeAccess().getAllocationContextsAllocationContextParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__ContainerAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllocationContextAccess().getContainerContainerCrossReference_3_0()); }
		(
			{ before(grammarAccess.getAllocationContextAccess().getContainerContainerEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getAllocationContextAccess().getContainerContainerEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getAllocationContextAccess().getContainerContainerCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocationContext__AssemblyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllocationContextAccess().getAssemblyAssemblyContextCrossReference_5_0()); }
		(
			{ before(grammarAccess.getAllocationContextAccess().getAssemblyAssemblyContextQualifiedNameParserRuleCall_5_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getAllocationContextAccess().getAssemblyAssemblyContextQualifiedNameParserRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getAllocationContextAccess().getAssemblyAssemblyContextCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
