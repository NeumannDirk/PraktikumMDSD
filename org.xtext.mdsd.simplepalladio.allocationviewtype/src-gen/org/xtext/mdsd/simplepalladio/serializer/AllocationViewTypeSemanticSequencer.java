/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mdsd.simplepalladio.services.AllocationViewTypeGrammarAccess;
import simplePalladio.DeploymentViewPoint.AllocationContext;
import simplePalladio.DeploymentViewPoint.AllocationViewType;
import simplePalladio.DeploymentViewPoint.DeploymentViewPointPackage;

@SuppressWarnings("all")
public class AllocationViewTypeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AllocationViewTypeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeploymentViewPointPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeploymentViewPointPackage.ALLOCATION_CONTEXT:
				sequence_AllocationContext(context, (AllocationContext) semanticObject); 
				return; 
			case DeploymentViewPointPackage.ALLOCATION_VIEW_TYPE:
				sequence_AllocationViewType(context, (AllocationViewType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AllocationContext returns AllocationContext
	 *
	 * Constraint:
	 *     (container=[Container|EString] assembly=[AssemblyContext|EString])
	 */
	protected void sequence_AllocationContext(ISerializationContext context, AllocationContext semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__CONTAINER));
			if (transientValues.isValueTransient(semanticObject, DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAllocationContextAccess().getContainerContainerEStringParserRuleCall_3_0_1(), semanticObject.eGet(DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__CONTAINER, false));
		feeder.accept(grammarAccess.getAllocationContextAccess().getAssemblyAssemblyContextEStringParserRuleCall_5_0_1(), semanticObject.eGet(DeploymentViewPointPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AllocationViewType returns AllocationViewType
	 *
	 * Constraint:
	 *     (allocationContexts+=AllocationContext allocationContexts+=AllocationContext*)
	 */
	protected void sequence_AllocationViewType(ISerializationContext context, AllocationViewType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
