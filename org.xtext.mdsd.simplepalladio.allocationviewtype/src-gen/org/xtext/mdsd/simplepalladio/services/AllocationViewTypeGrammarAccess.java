/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AllocationViewTypeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AllocationViewTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsd.simplepalladio.AllocationViewType.AllocationViewType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocationViewTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllocationContextsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAllocationContextsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllocationContextsAllocationContextParserRuleCall_4_0 = (RuleCall)cAllocationContextsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAllocationContextsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAllocationContextsAllocationContextParserRuleCall_5_1_0 = (RuleCall)cAllocationContextsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AllocationViewType DeploymentViewPoint::AllocationViewType:
		//	'AllocationViewType'
		//	'{'
		//	'allocationContexts' '{' allocationContexts+=AllocationContext ("," allocationContexts+=AllocationContext)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AllocationViewType'
		//'{'
		//'allocationContexts' '{' allocationContexts+=AllocationContext ("," allocationContexts+=AllocationContext)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AllocationViewType'
		public Keyword getAllocationViewTypeKeyword_0() { return cAllocationViewTypeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'allocationContexts'
		public Keyword getAllocationContextsKeyword_2() { return cAllocationContextsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//allocationContexts+=AllocationContext
		public Assignment getAllocationContextsAssignment_4() { return cAllocationContextsAssignment_4; }
		
		//AllocationContext
		public RuleCall getAllocationContextsAllocationContextParserRuleCall_4_0() { return cAllocationContextsAllocationContextParserRuleCall_4_0; }
		
		//("," allocationContexts+=AllocationContext)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//allocationContexts+=AllocationContext
		public Assignment getAllocationContextsAssignment_5_1() { return cAllocationContextsAssignment_5_1; }
		
		//AllocationContext
		public RuleCall getAllocationContextsAllocationContextParserRuleCall_5_1_0() { return cAllocationContextsAllocationContextParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AllocationContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsd.simplepalladio.AllocationViewType.AllocationContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocationContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContainerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContainerContainerCrossReference_3_0 = (CrossReference)cContainerAssignment_3.eContents().get(0);
		private final RuleCall cContainerContainerEStringParserRuleCall_3_0_1 = (RuleCall)cContainerContainerCrossReference_3_0.eContents().get(1);
		private final Keyword cAssemblyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAssemblyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAssemblyAssemblyContextCrossReference_5_0 = (CrossReference)cAssemblyAssignment_5.eContents().get(0);
		private final RuleCall cAssemblyAssemblyContextQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cAssemblyAssemblyContextCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AllocationContext DeploymentViewPoint::AllocationContext:
		//	'AllocationContext'
		//	'{'
		//	'container' container=[DeploymentViewPoint::Container|EString]
		//	'assembly' assembly=[AssemblyViewPoint::AssemblyContext|QualifiedName]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AllocationContext'
		//'{'
		//'container' container=[DeploymentViewPoint::Container|EString]
		//'assembly' assembly=[AssemblyViewPoint::AssemblyContext|QualifiedName]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AllocationContext'
		public Keyword getAllocationContextKeyword_0() { return cAllocationContextKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'container'
		public Keyword getContainerKeyword_2() { return cContainerKeyword_2; }
		
		//container=[DeploymentViewPoint::Container|EString]
		public Assignment getContainerAssignment_3() { return cContainerAssignment_3; }
		
		//[DeploymentViewPoint::Container|EString]
		public CrossReference getContainerContainerCrossReference_3_0() { return cContainerContainerCrossReference_3_0; }
		
		//EString
		public RuleCall getContainerContainerEStringParserRuleCall_3_0_1() { return cContainerContainerEStringParserRuleCall_3_0_1; }
		
		//'assembly'
		public Keyword getAssemblyKeyword_4() { return cAssemblyKeyword_4; }
		
		//assembly=[AssemblyViewPoint::AssemblyContext|QualifiedName]
		public Assignment getAssemblyAssignment_5() { return cAssemblyAssignment_5; }
		
		//[AssemblyViewPoint::AssemblyContext|QualifiedName]
		public CrossReference getAssemblyAssemblyContextCrossReference_5_0() { return cAssemblyAssemblyContextCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getAssemblyAssemblyContextQualifiedNameParserRuleCall_5_0_1() { return cAssemblyAssemblyContextQualifiedNameParserRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsd.simplepalladio.AllocationViewType.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsd.simplepalladio.AllocationViewType.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final AllocationViewTypeElements pAllocationViewType;
	private final AllocationContextElements pAllocationContext;
	private final EStringElements pEString;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AllocationViewTypeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAllocationViewType = new AllocationViewTypeElements();
		this.pAllocationContext = new AllocationContextElements();
		this.pEString = new EStringElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mdsd.simplepalladio.AllocationViewType".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AllocationViewType DeploymentViewPoint::AllocationViewType:
	//	'AllocationViewType'
	//	'{'
	//	'allocationContexts' '{' allocationContexts+=AllocationContext ("," allocationContexts+=AllocationContext)* '}'
	//	'}';
	public AllocationViewTypeElements getAllocationViewTypeAccess() {
		return pAllocationViewType;
	}
	
	public ParserRule getAllocationViewTypeRule() {
		return getAllocationViewTypeAccess().getRule();
	}
	
	//AllocationContext DeploymentViewPoint::AllocationContext:
	//	'AllocationContext'
	//	'{'
	//	'container' container=[DeploymentViewPoint::Container|EString]
	//	'assembly' assembly=[AssemblyViewPoint::AssemblyContext|QualifiedName]
	//	'}';
	public AllocationContextElements getAllocationContextAccess() {
		return pAllocationContext;
	}
	
	public ParserRule getAllocationContextRule() {
		return getAllocationContextAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
