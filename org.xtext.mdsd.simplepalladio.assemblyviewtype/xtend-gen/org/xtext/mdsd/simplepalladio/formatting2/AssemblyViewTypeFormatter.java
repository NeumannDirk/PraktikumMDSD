/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.mdsd.simplepalladio.services.AssemblyViewTypeGrammarAccess;
import simplePalladio.AssemblyViewPoint.AbstractSystemElement;
import simplePalladio.AssemblyViewPoint.AssemblyViewType;

@SuppressWarnings("all")
public class AssemblyViewTypeFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AssemblyViewTypeGrammarAccess _assemblyViewTypeGrammarAccess;
  
  protected void _format(final AssemblyViewType assemblyViewType, @Extension final IFormattableDocument document) {
    EList<simplePalladio.AssemblyViewPoint.System> _systems = assemblyViewType.getSystems();
    for (final simplePalladio.AssemblyViewPoint.System system : _systems) {
      document.<simplePalladio.AssemblyViewPoint.System>format(system);
    }
  }
  
  protected void _format(final simplePalladio.AssemblyViewPoint.System system, @Extension final IFormattableDocument document) {
    EList<AbstractSystemElement> _systemElements = system.getSystemElements();
    for (final AbstractSystemElement abstractSystemElement : _systemElements) {
      document.<AbstractSystemElement>format(abstractSystemElement);
    }
  }
  
  public void format(final Object system, final IFormattableDocument document) {
    if (system instanceof XtextResource) {
      _format((XtextResource)system, document);
      return;
    } else if (system instanceof simplePalladio.AssemblyViewPoint.System) {
      _format((simplePalladio.AssemblyViewPoint.System)system, document);
      return;
    } else if (system instanceof AssemblyViewType) {
      _format((AssemblyViewType)system, document);
      return;
    } else if (system instanceof EObject) {
      _format((EObject)system, document);
      return;
    } else if (system == null) {
      _format((Void)null, document);
      return;
    } else if (system != null) {
      _format(system, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(system, document).toString());
    }
  }
}
