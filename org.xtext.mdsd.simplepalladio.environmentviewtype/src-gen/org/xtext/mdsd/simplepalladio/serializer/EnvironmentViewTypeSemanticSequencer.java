/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mdsd.simplepalladio.services.EnvironmentViewTypeGrammarAccess;
import simplePalladio.Common.CommonPackage;
import simplePalladio.DeploymentViewPoint.Container;
import simplePalladio.DeploymentViewPoint.DeploymentViewPointPackage;
import simplePalladio.DeploymentViewPoint.EnvironmentViewType;
import simplePalladio.DeploymentViewPoint.Link;

@SuppressWarnings("all")
public class EnvironmentViewTypeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EnvironmentViewTypeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeploymentViewPointPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeploymentViewPointPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case DeploymentViewPointPackage.ENVIRONMENT_VIEW_TYPE:
				sequence_EnvironmentViewType(context, (EnvironmentViewType) semanticObject); 
				return; 
			case DeploymentViewPointPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractEnvironmentElement returns Container
	 *     Container returns Container
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CommonPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CommonPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvironmentViewType returns EnvironmentViewType
	 *
	 * Constraint:
	 *     (environmentElements+=AbstractEnvironmentElement environmentElements+=AbstractEnvironmentElement*)
	 */
	protected void sequence_EnvironmentViewType(ISerializationContext context, EnvironmentViewType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractEnvironmentElement returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=EString containers+=[Container|EString] containers+=[Container|EString]+)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
