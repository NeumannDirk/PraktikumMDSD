/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.mdsd.simplepalladio.ide.contentassist.antlr.internal.InternalRepositoryViewTypeParser;
import org.xtext.mdsd.simplepalladio.services.RepositoryViewTypeGrammarAccess;

public class RepositoryViewTypeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RepositoryViewTypeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RepositoryViewTypeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractRepositoryElementAccess().getAlternatives(), "rule__AbstractRepositoryElement__Alternatives");
			builder.put(grammarAccess.getInterfaceCommunicatorAccess().getAlternatives(), "rule__InterfaceCommunicator__Alternatives");
			builder.put(grammarAccess.getAbstractComponentAccess().getAlternatives(), "rule__AbstractComponent__Alternatives");
			builder.put(grammarAccess.getBehaviorElementAccess().getAlternatives(), "rule__BehaviorElement__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getRepositoryViewTypeAccess().getGroup(), "rule__RepositoryViewType__Group__0");
			builder.put(grammarAccess.getRepositoryViewTypeAccess().getGroup_5(), "rule__RepositoryViewType__Group_5__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup_6(), "rule__Interface__Group_6__0");
			builder.put(grammarAccess.getCompositeComponentAccess().getGroup(), "rule__CompositeComponent__Group__0");
			builder.put(grammarAccess.getCompositeComponentAccess().getGroup_3(), "rule__CompositeComponent__Group_3__0");
			builder.put(grammarAccess.getCompositeComponentAccess().getGroup_3_3(), "rule__CompositeComponent__Group_3_3__0");
			builder.put(grammarAccess.getCompositeComponentAccess().getGroup_7(), "rule__CompositeComponent__Group_7__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup_5(), "rule__Signature__Group_5__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup_5_3(), "rule__Signature__Group_5_3__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_3(), "rule__Component__Group_3__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_3_3(), "rule__Component__Group_3_3__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_7(), "rule__Component__Group_7__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_12(), "rule__Component__Group_12__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getBehaviourDescriptionAccess().getGroup(), "rule__BehaviourDescription__Group__0");
			builder.put(grammarAccess.getBehaviourDescriptionAccess().getGroup_3(), "rule__BehaviourDescription__Group_3__0");
			builder.put(grammarAccess.getBehaviourDescriptionAccess().getGroup_3_3(), "rule__BehaviourDescription__Group_3_3__0");
			builder.put(grammarAccess.getInternalActionAccess().getGroup(), "rule__InternalAction__Group__0");
			builder.put(grammarAccess.getExternalCallAccess().getGroup(), "rule__ExternalCall__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_3(), "rule__Loop__Group_3__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_3_3(), "rule__Loop__Group_3_3__0");
			builder.put(grammarAccess.getBranchAccess().getGroup(), "rule__Branch__Group__0");
			builder.put(grammarAccess.getBranchAccess().getGroup_3(), "rule__Branch__Group_3__0");
			builder.put(grammarAccess.getBranchAccess().getGroup_3_3(), "rule__Branch__Group_3_3__0");
			builder.put(grammarAccess.getRepositoryViewTypeAccess().getRepositoryElementsAssignment_4(), "rule__RepositoryViewType__RepositoryElementsAssignment_4");
			builder.put(grammarAccess.getRepositoryViewTypeAccess().getRepositoryElementsAssignment_5_1(), "rule__RepositoryViewType__RepositoryElementsAssignment_5_1");
			builder.put(grammarAccess.getInterfaceAccess().getNameAssignment_1(), "rule__Interface__NameAssignment_1");
			builder.put(grammarAccess.getInterfaceAccess().getSignaturesAssignment_5(), "rule__Interface__SignaturesAssignment_5");
			builder.put(grammarAccess.getInterfaceAccess().getSignaturesAssignment_6_1(), "rule__Interface__SignaturesAssignment_6_1");
			builder.put(grammarAccess.getCompositeComponentAccess().getNameAssignment_1(), "rule__CompositeComponent__NameAssignment_1");
			builder.put(grammarAccess.getCompositeComponentAccess().getRequiredInterfacesAssignment_3_2(), "rule__CompositeComponent__RequiredInterfacesAssignment_3_2");
			builder.put(grammarAccess.getCompositeComponentAccess().getRequiredInterfacesAssignment_3_3_1(), "rule__CompositeComponent__RequiredInterfacesAssignment_3_3_1");
			builder.put(grammarAccess.getCompositeComponentAccess().getProvidedInterfacesAssignment_6(), "rule__CompositeComponent__ProvidedInterfacesAssignment_6");
			builder.put(grammarAccess.getCompositeComponentAccess().getProvidedInterfacesAssignment_7_1(), "rule__CompositeComponent__ProvidedInterfacesAssignment_7_1");
			builder.put(grammarAccess.getCompositeComponentAccess().getSystemAssignment_10(), "rule__CompositeComponent__SystemAssignment_10");
			builder.put(grammarAccess.getSignatureAccess().getNameAssignment_1(), "rule__Signature__NameAssignment_1");
			builder.put(grammarAccess.getSignatureAccess().getReturnValueAssignment_4(), "rule__Signature__ReturnValueAssignment_4");
			builder.put(grammarAccess.getSignatureAccess().getParametersAssignment_5_2(), "rule__Signature__ParametersAssignment_5_2");
			builder.put(grammarAccess.getSignatureAccess().getParametersAssignment_5_3_1(), "rule__Signature__ParametersAssignment_5_3_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getRequiredInterfacesAssignment_3_2(), "rule__Component__RequiredInterfacesAssignment_3_2");
			builder.put(grammarAccess.getComponentAccess().getRequiredInterfacesAssignment_3_3_1(), "rule__Component__RequiredInterfacesAssignment_3_3_1");
			builder.put(grammarAccess.getComponentAccess().getProvidedInterfacesAssignment_6(), "rule__Component__ProvidedInterfacesAssignment_6");
			builder.put(grammarAccess.getComponentAccess().getProvidedInterfacesAssignment_7_1(), "rule__Component__ProvidedInterfacesAssignment_7_1");
			builder.put(grammarAccess.getComponentAccess().getServicesAssignment_11(), "rule__Component__ServicesAssignment_11");
			builder.put(grammarAccess.getComponentAccess().getServicesAssignment_12_1(), "rule__Component__ServicesAssignment_12_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_4(), "rule__Parameter__TypeAssignment_4");
			builder.put(grammarAccess.getServiceAccess().getSignatureAssignment_3(), "rule__Service__SignatureAssignment_3");
			builder.put(grammarAccess.getServiceAccess().getBehaviourDescriptionAssignment_5(), "rule__Service__BehaviourDescriptionAssignment_5");
			builder.put(grammarAccess.getBehaviourDescriptionAccess().getBehaviorElementsAssignment_3_2(), "rule__BehaviourDescription__BehaviorElementsAssignment_3_2");
			builder.put(grammarAccess.getBehaviourDescriptionAccess().getBehaviorElementsAssignment_3_3_1(), "rule__BehaviourDescription__BehaviorElementsAssignment_3_3_1");
			builder.put(grammarAccess.getExternalCallAccess().getSignatureAssignment_3(), "rule__ExternalCall__SignatureAssignment_3");
			builder.put(grammarAccess.getLoopAccess().getBehaviorElementsAssignment_3_2(), "rule__Loop__BehaviorElementsAssignment_3_2");
			builder.put(grammarAccess.getLoopAccess().getBehaviorElementsAssignment_3_3_1(), "rule__Loop__BehaviorElementsAssignment_3_3_1");
			builder.put(grammarAccess.getBranchAccess().getBehaviorElementsAssignment_3_2(), "rule__Branch__BehaviorElementsAssignment_3_2");
			builder.put(grammarAccess.getBranchAccess().getBehaviorElementsAssignment_3_3_1(), "rule__Branch__BehaviorElementsAssignment_3_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RepositoryViewTypeGrammarAccess grammarAccess;

	@Override
	protected InternalRepositoryViewTypeParser createParser() {
		InternalRepositoryViewTypeParser result = new InternalRepositoryViewTypeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RepositoryViewTypeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RepositoryViewTypeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
