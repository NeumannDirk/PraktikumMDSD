/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mdsd.simplepalladio.services.RepositoryViewTypeGrammarAccess;
import simplePalladio.Common.CommonPackage;
import simplePalladio.SystemIndependentViewPoint.BehaviourDescription;
import simplePalladio.SystemIndependentViewPoint.Branch;
import simplePalladio.SystemIndependentViewPoint.Component;
import simplePalladio.SystemIndependentViewPoint.CompositeComponent;
import simplePalladio.SystemIndependentViewPoint.ExternalCall;
import simplePalladio.SystemIndependentViewPoint.Interface;
import simplePalladio.SystemIndependentViewPoint.InternalAction;
import simplePalladio.SystemIndependentViewPoint.Loop;
import simplePalladio.SystemIndependentViewPoint.RepositoryViewType;
import simplePalladio.SystemIndependentViewPoint.Service;
import simplePalladio.SystemIndependentViewPoint.Signature;
import simplePalladio.SystemIndependentViewPoint.SystemIndependentViewPointPackage;

@SuppressWarnings("all")
public class RepositoryViewTypeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RepositoryViewTypeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SystemIndependentViewPointPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SystemIndependentViewPointPackage.BEHAVIOUR_DESCRIPTION:
				sequence_BehaviourDescription(context, (BehaviourDescription) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.COMPOSITE_COMPONENT:
				sequence_CompositeComponent(context, (CompositeComponent) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.EXTERNAL_CALL:
				sequence_ExternalCall(context, (ExternalCall) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.INTERNAL_ACTION:
				sequence_InternalAction(context, (InternalAction) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.PARAMETER:
				sequence_Parameter(context, (simplePalladio.SystemIndependentViewPoint.Parameter) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.REPOSITORY_VIEW_TYPE:
				sequence_RepositoryViewType(context, (RepositoryViewType) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case SystemIndependentViewPointPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BehaviourDescription returns BehaviourDescription
	 *
	 * Constraint:
	 *     (behaviorElements+=BehaviorElement behaviorElements+=BehaviorElement*)?
	 */
	protected void sequence_BehaviourDescription(ISerializationContext context, BehaviourDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorElement returns Branch
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     (behaviorElements+=[BehaviorElement|EString] behaviorElements+=[BehaviorElement|EString]*)?
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractRepositoryElement returns Component
	 *     InterfaceCommunicator returns Component
	 *     AbstractComponent returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requiredInterfaces+=[Interface|EString] requiredInterfaces+=[Interface|EString]*)? 
	 *         providedInterfaces+=[Interface|EString] 
	 *         providedInterfaces+=[Interface|EString]* 
	 *         services+=Service 
	 *         services+=Service*
	 *     )
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractRepositoryElement returns CompositeComponent
	 *     InterfaceCommunicator returns CompositeComponent
	 *     AbstractComponent returns CompositeComponent
	 *     CompositeComponent returns CompositeComponent
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requiredInterfaces+=[Interface|EString] requiredInterfaces+=[Interface|EString]*)? 
	 *         providedInterfaces+=[Interface|EString] 
	 *         providedInterfaces+=[Interface|EString]* 
	 *         system=[System|EString]
	 *     )
	 */
	protected void sequence_CompositeComponent(ISerializationContext context, CompositeComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorElement returns ExternalCall
	 *     ExternalCall returns ExternalCall
	 *
	 * Constraint:
	 *     signature=[Signature|EString]
	 */
	protected void sequence_ExternalCall(ISerializationContext context, ExternalCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SystemIndependentViewPointPackage.Literals.EXTERNAL_CALL__SIGNATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SystemIndependentViewPointPackage.Literals.EXTERNAL_CALL__SIGNATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExternalCallAccess().getSignatureSignatureEStringParserRuleCall_3_0_1(), semanticObject.eGet(SystemIndependentViewPointPackage.Literals.EXTERNAL_CALL__SIGNATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractRepositoryElement returns Interface
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=EString signatures+=[Signature|EString] signatures+=[Signature|EString]*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorElement returns InternalAction
	 *     InternalAction returns InternalAction
	 *
	 * Constraint:
	 *     {InternalAction}
	 */
	protected void sequence_InternalAction(ISerializationContext context, InternalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorElement returns Loop
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     (behaviorElements+=[BehaviorElement|EString] behaviorElements+=[BehaviorElement|EString]*)?
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_Parameter(ISerializationContext context, simplePalladio.SystemIndependentViewPoint.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CommonPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CommonPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SystemIndependentViewPointPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SystemIndependentViewPointPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeEnumRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RepositoryViewType returns RepositoryViewType
	 *
	 * Constraint:
	 *     (repositoryElements+=AbstractRepositoryElement repositoryElements+=AbstractRepositoryElement*)
	 */
	protected void sequence_RepositoryViewType(ISerializationContext context, RepositoryViewType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (signature=[Signature|EString] behaviourDescription=BehaviourDescription)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SystemIndependentViewPointPackage.Literals.SERVICE__SIGNATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SystemIndependentViewPointPackage.Literals.SERVICE__SIGNATURE));
			if (transientValues.isValueTransient(semanticObject, SystemIndependentViewPointPackage.Literals.SERVICE__BEHAVIOUR_DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SystemIndependentViewPointPackage.Literals.SERVICE__BEHAVIOUR_DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceAccess().getSignatureSignatureEStringParserRuleCall_3_0_1(), semanticObject.eGet(SystemIndependentViewPointPackage.Literals.SERVICE__SIGNATURE, false));
		feeder.accept(grammarAccess.getServiceAccess().getBehaviourDescriptionBehaviourDescriptionParserRuleCall_5_0(), semanticObject.getBehaviourDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractRepositoryElement returns Signature
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=EString returnValue=Type (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
