/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.mdsd.simplepalladio.services.RepositoryViewTypeGrammarAccess;
import simplePalladio.SystemIndependentViewPoint.AbstractRepositoryElement;
import simplePalladio.SystemIndependentViewPoint.Parameter;
import simplePalladio.SystemIndependentViewPoint.RepositoryViewType;
import simplePalladio.SystemIndependentViewPoint.Signature;

@SuppressWarnings("all")
public class RepositoryViewTypeFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RepositoryViewTypeGrammarAccess _repositoryViewTypeGrammarAccess;
  
  protected void _format(final RepositoryViewType repositoryViewType, @Extension final IFormattableDocument document) {
    EList<AbstractRepositoryElement> _repositoryElements = repositoryViewType.getRepositoryElements();
    for (final AbstractRepositoryElement abstractRepositoryElement : _repositoryElements) {
      document.<AbstractRepositoryElement>format(abstractRepositoryElement);
    }
  }
  
  protected void _format(final Signature signature, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = signature.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
  }
  
  public void format(final Object signature, final IFormattableDocument document) {
    if (signature instanceof XtextResource) {
      _format((XtextResource)signature, document);
      return;
    } else if (signature instanceof Signature) {
      _format((Signature)signature, document);
      return;
    } else if (signature instanceof RepositoryViewType) {
      _format((RepositoryViewType)signature, document);
      return;
    } else if (signature instanceof EObject) {
      _format((EObject)signature, document);
      return;
    } else if (signature == null) {
      _format((Void)null, document);
      return;
    } else if (signature != null) {
      _format(signature, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(signature, document).toString());
    }
  }
}
