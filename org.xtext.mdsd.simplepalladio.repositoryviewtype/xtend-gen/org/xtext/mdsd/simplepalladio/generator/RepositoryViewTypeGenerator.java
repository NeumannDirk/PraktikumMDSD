/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsd.simplepalladio.generator;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.FileExtensionProvider;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import simplePalladio.SystemIndependentViewPoint.RepositoryViewType;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RepositoryViewTypeGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private FileExtensionProvider _fileExtensionProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    this.serialize(this.toOutputURI(resource), ((RepositoryViewType) _head));
  }
  
  private void serialize(final URI outputURI, final RepositoryViewType repository) {
    try {
      final Resource resource = new XtextResourceSet().createResource(outputURI);
      EList<EObject> _contents = resource.getContents();
      _contents.add(repository);
      resource.save(CollectionLiterals.<Object, Object>newHashMap());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private URI toOutputURI(final Resource input) {
    URI _xblockexpression = null;
    {
      final URI inputUri = input.getURI();
      final String inputPath = inputUri.toPlatformString(true);
      String _primaryFileExtension = this._fileExtensionProvider.getPrimaryFileExtension();
      String _plus = ("." + _primaryFileExtension);
      final String outputPath = inputPath.replace(_plus, ".systemindependentviewpoint");
      _xblockexpression = URI.createPlatformResourceURI(outputPath, true);
    }
    return _xblockexpression;
  }
}
