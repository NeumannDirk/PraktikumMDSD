/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsm.simplePalladio.simplepalladio.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.mdsm.simplePalladio.simplepalladio.Model;
import org.xtext.mdsm.simplePalladio.simplepalladio.SimplepalladioPackage;

import simplePalladio.AssemblyViewPoint.AssemblyViewType;

import simplePalladio.DeploymentViewPoint.AllocationViewType;
import simplePalladio.DeploymentViewPoint.EnvironmentViewType;

import simplePalladio.SystemIndependentViewPoint.RepositoryViewType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsm.simplePalladio.simplepalladio.impl.ModelImpl#getRepositoryViewType <em>Repository View Type</em>}</li>
 *   <li>{@link org.xtext.mdsm.simplePalladio.simplepalladio.impl.ModelImpl#getAssemblyViewType <em>Assembly View Type</em>}</li>
 *   <li>{@link org.xtext.mdsm.simplePalladio.simplepalladio.impl.ModelImpl#getEnvironmentViewType <em>Environment View Type</em>}</li>
 *   <li>{@link org.xtext.mdsm.simplePalladio.simplepalladio.impl.ModelImpl#getAllocationViewType <em>Allocation View Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getRepositoryViewType() <em>Repository View Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepositoryViewType()
   * @generated
   * @ordered
   */
  protected RepositoryViewType repositoryViewType;

  /**
   * The cached value of the '{@link #getAssemblyViewType() <em>Assembly View Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssemblyViewType()
   * @generated
   * @ordered
   */
  protected AssemblyViewType assemblyViewType;

  /**
   * The cached value of the '{@link #getEnvironmentViewType() <em>Environment View Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironmentViewType()
   * @generated
   * @ordered
   */
  protected EnvironmentViewType environmentViewType;

  /**
   * The cached value of the '{@link #getAllocationViewType() <em>Allocation View Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllocationViewType()
   * @generated
   * @ordered
   */
  protected AllocationViewType allocationViewType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimplepalladioPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepositoryViewType getRepositoryViewType()
  {
    return repositoryViewType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRepositoryViewType(RepositoryViewType newRepositoryViewType, NotificationChain msgs)
  {
    RepositoryViewType oldRepositoryViewType = repositoryViewType;
    repositoryViewType = newRepositoryViewType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE, oldRepositoryViewType, newRepositoryViewType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRepositoryViewType(RepositoryViewType newRepositoryViewType)
  {
    if (newRepositoryViewType != repositoryViewType)
    {
      NotificationChain msgs = null;
      if (repositoryViewType != null)
        msgs = ((InternalEObject)repositoryViewType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE, null, msgs);
      if (newRepositoryViewType != null)
        msgs = ((InternalEObject)newRepositoryViewType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE, null, msgs);
      msgs = basicSetRepositoryViewType(newRepositoryViewType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE, newRepositoryViewType, newRepositoryViewType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssemblyViewType getAssemblyViewType()
  {
    return assemblyViewType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssemblyViewType(AssemblyViewType newAssemblyViewType, NotificationChain msgs)
  {
    AssemblyViewType oldAssemblyViewType = assemblyViewType;
    assemblyViewType = newAssemblyViewType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE, oldAssemblyViewType, newAssemblyViewType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssemblyViewType(AssemblyViewType newAssemblyViewType)
  {
    if (newAssemblyViewType != assemblyViewType)
    {
      NotificationChain msgs = null;
      if (assemblyViewType != null)
        msgs = ((InternalEObject)assemblyViewType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE, null, msgs);
      if (newAssemblyViewType != null)
        msgs = ((InternalEObject)newAssemblyViewType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE, null, msgs);
      msgs = basicSetAssemblyViewType(newAssemblyViewType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE, newAssemblyViewType, newAssemblyViewType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentViewType getEnvironmentViewType()
  {
    return environmentViewType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnvironmentViewType(EnvironmentViewType newEnvironmentViewType, NotificationChain msgs)
  {
    EnvironmentViewType oldEnvironmentViewType = environmentViewType;
    environmentViewType = newEnvironmentViewType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE, oldEnvironmentViewType, newEnvironmentViewType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnvironmentViewType(EnvironmentViewType newEnvironmentViewType)
  {
    if (newEnvironmentViewType != environmentViewType)
    {
      NotificationChain msgs = null;
      if (environmentViewType != null)
        msgs = ((InternalEObject)environmentViewType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE, null, msgs);
      if (newEnvironmentViewType != null)
        msgs = ((InternalEObject)newEnvironmentViewType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE, null, msgs);
      msgs = basicSetEnvironmentViewType(newEnvironmentViewType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE, newEnvironmentViewType, newEnvironmentViewType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllocationViewType getAllocationViewType()
  {
    return allocationViewType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllocationViewType(AllocationViewType newAllocationViewType, NotificationChain msgs)
  {
    AllocationViewType oldAllocationViewType = allocationViewType;
    allocationViewType = newAllocationViewType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE, oldAllocationViewType, newAllocationViewType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAllocationViewType(AllocationViewType newAllocationViewType)
  {
    if (newAllocationViewType != allocationViewType)
    {
      NotificationChain msgs = null;
      if (allocationViewType != null)
        msgs = ((InternalEObject)allocationViewType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE, null, msgs);
      if (newAllocationViewType != null)
        msgs = ((InternalEObject)newAllocationViewType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE, null, msgs);
      msgs = basicSetAllocationViewType(newAllocationViewType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE, newAllocationViewType, newAllocationViewType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE:
        return basicSetRepositoryViewType(null, msgs);
      case SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE:
        return basicSetAssemblyViewType(null, msgs);
      case SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE:
        return basicSetEnvironmentViewType(null, msgs);
      case SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE:
        return basicSetAllocationViewType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE:
        return getRepositoryViewType();
      case SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE:
        return getAssemblyViewType();
      case SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE:
        return getEnvironmentViewType();
      case SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE:
        return getAllocationViewType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE:
        setRepositoryViewType((RepositoryViewType)newValue);
        return;
      case SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE:
        setAssemblyViewType((AssemblyViewType)newValue);
        return;
      case SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE:
        setEnvironmentViewType((EnvironmentViewType)newValue);
        return;
      case SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE:
        setAllocationViewType((AllocationViewType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE:
        setRepositoryViewType((RepositoryViewType)null);
        return;
      case SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE:
        setAssemblyViewType((AssemblyViewType)null);
        return;
      case SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE:
        setEnvironmentViewType((EnvironmentViewType)null);
        return;
      case SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE:
        setAllocationViewType((AllocationViewType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimplepalladioPackage.MODEL__REPOSITORY_VIEW_TYPE:
        return repositoryViewType != null;
      case SimplepalladioPackage.MODEL__ASSEMBLY_VIEW_TYPE:
        return assemblyViewType != null;
      case SimplepalladioPackage.MODEL__ENVIRONMENT_VIEW_TYPE:
        return environmentViewType != null;
      case SimplepalladioPackage.MODEL__ALLOCATION_VIEW_TYPE:
        return allocationViewType != null;
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
