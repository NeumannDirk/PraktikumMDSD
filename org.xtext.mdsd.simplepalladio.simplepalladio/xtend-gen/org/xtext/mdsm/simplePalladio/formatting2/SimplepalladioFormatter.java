/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mdsm.simplePalladio.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.mdsm.simplePalladio.services.SimplepalladioGrammarAccess;
import org.xtext.mdsm.simplePalladio.simplepalladio.Model;
import simplePalladio.AssemblyViewPoint.AssemblyViewType;
import simplePalladio.DeploymentViewPoint.AllocationViewType;
import simplePalladio.DeploymentViewPoint.EnvironmentViewType;
import simplePalladio.SystemIndependentViewPoint.AbstractRepositoryElement;
import simplePalladio.SystemIndependentViewPoint.RepositoryViewType;

@SuppressWarnings("all")
public class SimplepalladioFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SimplepalladioGrammarAccess _simplepalladioGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    document.<RepositoryViewType>format(model.getRepositoryViewType());
    document.<AssemblyViewType>format(model.getAssemblyViewType());
    document.<EnvironmentViewType>format(model.getEnvironmentViewType());
    document.<AllocationViewType>format(model.getAllocationViewType());
  }
  
  protected void _format(final RepositoryViewType repositoryViewType, @Extension final IFormattableDocument document) {
    EList<AbstractRepositoryElement> _repositoryElements = repositoryViewType.getRepositoryElements();
    for (final AbstractRepositoryElement abstractRepositoryElement : _repositoryElements) {
      document.<AbstractRepositoryElement>format(abstractRepositoryElement);
    }
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof RepositoryViewType) {
      _format((RepositoryViewType)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
